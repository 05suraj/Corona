{"version":3,"sources":["App.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","image/coronavirus.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","class","id","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changebleUrl","axios","get","console","log","fetchDilydata","modifiedData","map","dailyData","total","dete","reportDate","fetchCountries","countries","name","Chart","useState","setDailydata","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","text","styles","container","CountryPicker","handelCounteryChange","fetchedCountries","setfetchedCountries","fetchAPI","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","Image","text_p","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d6fd08d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__RgCHV\",\"image\":\"App_image__1H2ie\",\"text_p\":\"App_text_p__3M4ON\",\"text_n\":\"App_text_n__EmdSW\",\"card-body\":\"App_card-body__iO87e\"};","import React from \"react\";\r\n\r\nimport CountUp from \"react-countup\";\r\n\r\nimport '../../assets/Main-card.css';\r\nimport '../../assets/Main-card.js';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading....\";\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container mb-4\">\r\n        <div class=\"row\">\r\n\r\n          <div className=\"col-sm-4 mar\">\r\n            <div className=\"card\" id='infected'>\r\n              <div className=\"card-body\">\r\n                <h5 className='card-title text-center text_w'> INFECTED</h5>\r\n                <h5 className=\"card-title text-center text_n\"> <CountUp\r\n                  start={0}\r\n                  end={confirmed.value}\r\n                  duration={2.75}\r\n                  separator=\", \"\r\n                /></h5>\r\n                <p className=\"card-text text-center text_d\"> {new Date(lastUpdate).toDateString()}</p>\r\n                <p className=\"card-text text-center text_h\">No Of Dathes Case</p>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-4 mar\">\r\n            <div className=\"card\" id=\"recovered\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title text-center text_w\">RECOVERED</h5>\r\n                <h5 className=\"card-title text-center text_n\"> <CountUp\r\n                  start={0}\r\n                  end={recovered.value}\r\n                  duration={2.75}\r\n                  separator=\", \"\r\n                /></h5>\r\n                <p className=\"card-text text-center text_d\"> {new Date(lastUpdate).toDateString()}</p>\r\n                <p className=\"card-text text-center text_h\">No Of Recoverd Active Case</p>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-sm-4 mar\">\r\n            <div className=\"card\" id=\"deaths\">\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title text-center text_w\">DEATHS</h5>\r\n                <h5 className=\"card-title text-center text_n\"> <CountUp\r\n                  start={0}\r\n                  end={deaths.value}\r\n                  duration={2.75}\r\n                  separator=\", \"\r\n                /></h5>\r\n                <p className=\"card-text text-center text_d\">{new Date(lastUpdate).toDateString()}</p>\r\n                <p className=\"card-text text-center text_h\">Total No Of Deaths</p>\r\n\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changebleUrl = url;\r\n  if (country) {\r\n    changebleUrl = `${url}/countries/${country}`\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changebleUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// chart api\r\n\r\nexport const fetchDilydata = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      dete: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n   \r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// country select\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDilydata } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailydata] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailydata(await fetchDilydata());\r\n    };\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const lineChart = (dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ dete }) => dete),\r\n\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null\r\n  );\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5\",\r\n              \"rgba(0,255,0,0.5\",\r\n              \"rgba(255,0,0,0.5\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <>\r\n      \r\n        <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n      \r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handelCounteryChange }) => {\r\n  const [fetchedCountries, setfetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setfetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setfetchedCountries]);\r\n\r\n  console.log(fetchedCountries);\r\n\r\n  return (\r\n    <>\r\n\r\n\r\n      <div class=\"container mb-5 mt-4\">\r\n        <div class=\"row\">\r\n\r\n          <div class=\"form-group col-md-4 text-center m-0 mx-auto mar\">\r\n\r\n            <select id=\"inputState\" class=\"form-control \" defaultValue=\"\"\r\n              onChange={(e) => handelCounteryChange(e.target.value)}>\r\n              <option > See Global Data</option>\r\n              {fetchedCountries.map((country, i) => (\r\n                <option key={i} value={country}>\r\n                  {country}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport Image from \"./image/coronavirus.png\";\n\n\nclass App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handelCounteryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <>\n        <div className={styles.container}>\n\n          <img className={styles.image} src={Image} />\n          <p>Developed by <span className={styles.text_p }>Suraj</span> </p>\n          <Cards data={data} />\n          <CountryPicker handelCounteryChange={this.handelCounteryChange} />\n          <Chart data={data} country={country} />\n        </div>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__NEmyV\"};","module.exports = __webpack_public_path__ + \"static/media/coronavirus.93ebcd12.png\";"],"sourceRoot":""}